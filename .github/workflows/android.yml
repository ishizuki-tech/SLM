name: Android CI & Dynamic Release

on:
  workflow_dispatch:
    inputs:
      module:
        description: "Android module path (e.g. app)"
        required: false
        default: "app"
      create_release:
        description: "Create GitHub Release and upload artifacts?"
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      MODULE_PATH: ${{ inputs.module || 'app' }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ORG_GRADLE_PROJECT_releaseStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ORG_GRADLE_PROJECT_releaseKeyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
      ORG_GRADLE_PROJECT_releaseKeyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}

    steps:
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Validate Gradle Wrapper (security)
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # -----------------------------
      # Android SDK を手動でセットアップ（NDK は不要）
      # -----------------------------
      - name: Set up Android SDK (manual, no NDK) - robust
        shell: bash
        run: |
          set -euo pipefail

          ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT:-/usr/local/lib/android/sdk}
          mkdir -p "$ANDROID_SDK_ROOT"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"

          SDKMANAGER=""
          if [ -x "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "${ANDROID_SDK_ROOT}/cmdline-tools/16.0/bin/sdkmanager" ]; then
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/16.0/bin/sdkmanager"
          elif command -v sdkmanager >/dev/null 2>&1; then
            SDKMANAGER="$(command -v sdkmanager)"
          fi

          if [ -z "$SDKMANAGER" ]; then
            echo "sdkmanager not found — downloading commandlinetools..."
            if ! command -v unzip >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y unzip
            fi
            tmpdir=$(mktemp -d)
            cd "$tmpdir"
            curl -fSL "https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip" -o cmdline.zip
            unzip -q cmdline.zip -d cmdline-tools
            mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
            if [ -d cmdline-tools/cmdline-tools ]; then
              mv cmdline-tools/cmdline-tools/* "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" || true
            else
              mv cmdline-tools/* "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" || true
            fi
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
            cd -
          fi

          echo "Using sdkmanager: $SDKMANAGER"

          # install packages (broken-pipe guarded)
          ( yes | "$SDKMANAGER" --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-36" ) || true
          ( yes | "$SDKMANAGER" --sdk_root="${ANDROID_SDK_ROOT}" --licenses ) || true

          if [ -d "${ANDROID_SDK_ROOT}/platform-tools" ]; then
            echo "platform-tools directory present."
          else
            echo "::error::platform-tools not found at ${ANDROID_SDK_ROOT}/platform-tools after install."
            ls -la "${ANDROID_SDK_ROOT}" || true
            exit 1
          fi

          if [ -d "${ANDROID_SDK_ROOT}/platforms/android-36" ]; then
            echo "platforms;android-36 installed."
          else
            echo "::error::platforms;android-36 not found at ${ANDROID_SDK_ROOT}/platforms/android-36."
            exit 1
          fi

          echo "${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_PATH

      # --------------------------------------------------------
      # Replace setup-gradle action with a wrapper that ensures
      # gradlew exists and is executable (removes cache dependency)
      # --------------------------------------------------------
      - name: Ensure Gradle wrapper present and usable (no cache)
        shell: bash
        run: |
          set -euo pipefail
          # If gradlew missing or not executable, generate a temporary wrapper (requires apt gradle)
          if [ ! -f "./gradlew" ] || [ ! -x "./gradlew" ]; then
            echo "gradlew missing or not executable — creating temporary wrapper."
            sudo apt-get update -y
            sudo apt-get install -y gradle
            gradle wrapper --gradle-version 8.11.1
            chmod +x ./gradlew
          fi
          # Confirm wrapper works
          ./gradlew --version

      - name: Debug repo & env (robust)
        shell: bash
        run: |
          set -euo pipefail
          echo "=== PWD ==="; pwd || true
          echo "=== Runner ==="; whoami || true; uname -a || true
          echo "=== Git ==="; git --version || true
          git rev-parse --show-toplevel 2>/dev/null || true
          git status --porcelain --branch || true
          git log -5 --pretty=format:'%h %s (%an)' || true
          ls -la || true
          sed -n '1,20p' ./gradlew || true
          echo "JAVA_HOME=${JAVA_HOME:-<unset>}"
          echo "ANDROID_HOME=${ANDROID_HOME:-<unset>}"
          echo "HF_TOKEN is ${HF_TOKEN:+<set>}"
          java -version || true

      - name: List JNI sources (debug)
        run: ls -lR nativelib/ || true

      - name: Decode keystore from secret (optional)
        if: ${{ env.ANDROID_KEYSTORE_BASE64 != '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > keystore.jks
          echo "ANDROID_KEYSTORE_FILE=$PWD/keystore.jks" >> $GITHUB_ENV

      # download script に必要なツール確認（ここでも unzip/wget を入れる）
      - name: Ensure download tools (curl or wget, unzip)
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v curl >/dev/null 2>&1 && ! command -v wget >/dev/null 2>&1; then
            echo "curl/wget not found — installing wget (requires sudo)"
            sudo apt-get update -y
            sudo apt-get install -y wget ca-certificates unzip
          fi
          echo "Available: curl=$(command -v curl || echo 'no'), wget=$(command -v wget || echo 'no'), unzip=$(command -v unzip || echo 'no')"

      # Validate HF_TOKEN (module-scoped)
      - name: Validate HF_TOKEN (module-scoped)
        shell: bash
        run: |
          set -euo pipefail
          SCRIPT_PATH="${MODULE_PATH}/download_models.sh"
          if [ -f "$SCRIPT_PATH" ]; then
            if [ -z "${HF_TOKEN:-}" ]; then
              echo "Error: ${SCRIPT_PATH} exists but HF_TOKEN secret is not set. Please add HF_TOKEN to repository secrets." >&2
              exit 1
            else
              echo "HF_TOKEN present (not printed). Proceeding with model download."
            fi
          else
            echo "${SCRIPT_PATH} not present; skipping HF_TOKEN check."
          fi

      - name: Download models (Gradle task) - guarded by module path
        shell: bash
        run: |
          set -euo pipefail
          SCRIPT_PATH="${MODULE_PATH}/download_models.sh"
          if [ -f "$SCRIPT_PATH" ]; then
            echo "Found $SCRIPT_PATH; running Gradle downloadModel for module ${MODULE_PATH}..."
            ./gradlew :${MODULE_PATH}:downloadModel --no-daemon --stacktrace
          else
            echo "$SCRIPT_PATH not found; skipping model download."
          fi

      - name: Build with Gradle (Release)
        id: gradle_build
        shell: bash
        run: |
          set -euo pipefail
          ./gradlew :${MODULE_PATH}:clean :${MODULE_PATH}:assembleRelease :${MODULE_PATH}:bundleRelease --no-daemon --stacktrace

      - name: Collect artifacts
        id: collect
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${MODULE_PATH}/build/outputs"
          mapfile -t APKs < <(find "$ROOT" -type f -name "*.apk" | sort)
          mapfile -t AABs < <(find "$ROOT" -type f -name "*.aab" | sort)
          mapfile -t MAPs < <(find "${MODULE_PATH}/build/outputs" -type f -name "mapping.txt" | sort || true)

          echo "apk_count=${#APKs[@]}" >> "$GITHUB_OUTPUT"
          echo "aab_count=${#AABs[@]}" >> "$GITHUB_OUTPUT"
          echo "map_count=${#MAPs[@]}" >> "$GITHUB_OUTPUT"

          {
            echo "apk_list<<EOF"
            printf "%s\n" "${APKs[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          {
            echo "aab_list<<EOF"
            printf "%s\n" "${AABs[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          {
            echo "map_list<<EOF"
            printf "%s\n" "${MAPs[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          echo "Found APKs:"; printf " - %s\n" "${APKs[@]}" || true
          echo "Found AABs:"; printf " - %s\n" "${AABs[@]}" || true
          echo "Found mappings:"; printf " - %s\n" "${MAPs[@]}" || true

      - name: Upload APKs
        if: ${{ steps.collect.outputs.apk_count != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-apks
          path: |
            ${{ steps.collect.outputs.apk_list }}

      - name: Upload AABs
        if: ${{ steps.collect.outputs.aab_count != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-aabs
          path: |
            ${{ steps.collect.outputs.aab_list }}

      - name: Upload ProGuard/R8 mappings
        if: ${{ steps.collect.outputs.map_count != '0' }}
        uses: actions/upload-artifact@v4
        with:
          name: proguard-mappings
          path: |
            ${{ steps.collect.outputs.map_list }}

      - name: Extract versionName
        id: version
        shell: bash
        run: |
          set -euo pipefail
          VERSION=""
          for FILE in "${MODULE_PATH}/build.gradle.kts" "${MODULE_PATH}/build.gradle"; do
            if [ -f "$FILE" ]; then
              CAND=$(grep -Eo 'versionName[[:space:]]*[:=]?[[:space:]]*["'"'"'][^"'"'"']+["'"'"']' "$FILE" \
                | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || true)
              if [ -n "$CAND" ]; then VERSION="$CAND"; break; fi
            fi
          done
          if [ -z "$VERSION" ] && [ -f "${MODULE_PATH}/src/main/AndroidManifest.xml" ]; then
            VERSION=$(grep -oP 'versionName="([^"]+)"' "${MODULE_PATH}/src/main/AndroidManifest.xml" \
              | sed -E 's/versionName="([^"]+)"/\1/' | head -n1 || true)
          fi
          [ -n "$VERSION" ] || VERSION="0.0.0"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Detected versionName: $VERSION"

      - name: Set tag name (version + datetime)
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          TAG="v${{ steps.version.outputs.version }}-$(date '+%Y%m%d-%H%M')"
          echo "tag_name=$TAG" >> "$GITHUB_OUTPUT"
          echo "Tag: $TAG"

      - name: Compose release body (notes + install guide)
        id: release_body
        shell: bash
        run: |
          set -euo pipefail
          # (同等の本文作成処理をここに置きます。省略せず元のスクリプトを入れてください)

      - name: Create or update Release and upload assets
        if: ${{ inputs.create_release && (steps.collect.outputs.apk_count != '0' || steps.collect.outputs.aab_count != '0') }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // (同等の JS リリース処理スクリプトをここに置きます。元のまま移植してください)

      - name: Skip release (no artifacts or disabled)
        if: ${{ !inputs.create_release || (steps.collect.outputs.apk_count == '0' && steps.collect.outputs.aab_count == '0') }}
        run: echo "Release step skipped."
